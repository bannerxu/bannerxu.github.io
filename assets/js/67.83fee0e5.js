(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{494:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、简介"}},[t._v("#")]),t._v(" 一、简介")]),t._v(" "),a("p",[t._v("从 3.1 版开始，Spring 框架提供了对将缓存透明添加到现有 Spring 应用程序的支持。与"),a("a",{attrs:{href:"https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/data-access.html#transaction",target:"_blank",rel:"noopener noreferrer"}},[t._v("transaction"),a("OutboundLink")],1),t._v("支持类似，缓存抽象允许一致使用各种缓存解决方案，而对代码的影响最小。在 "),a("code",[t._v("Spring-Context")]),t._v(" 包中定义了 "),a("code",[t._v("org.springframework.cache.Cache")]),t._v(" 和 "),a("code",[t._v("org.springframework.cache.CacheManager")]),t._v(" 两个接口来统一不同的缓存技术。Cache 接口包含缓存的常用操作：增加、删除、读取等。CacheManager 是 Spring 各种缓存的抽象接口。 Spring 支持的常用 CacheManager 如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("CacheManager")])]),t._v(" "),a("th",[a("strong",[t._v("描述")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("SimpleCacheManager")]),t._v(" "),a("td",[t._v("使用简单的 Collection 来存储缓存")])]),t._v(" "),a("tr",[a("td",[t._v("ConcurrentMapCacheManager")]),t._v(" "),a("td",[t._v("使用 java.util.ConcurrentHashMap 来实现缓存")])]),t._v(" "),a("tr",[a("td",[t._v("NoOpCacheManager")]),t._v(" "),a("td",[t._v("仅测试用，不会实际存储缓存")])]),t._v(" "),a("tr",[a("td",[t._v("EhCacheCacheManger")]),t._v(" "),a("td",[t._v("使用EhCache作为缓存技术。EhCache 是一个纯 Java 的进程内缓存框架，特点快速、精干，是 Hibernate 中默认的 CacheProvider，也是 Java 领域应用最为广泛的缓存")])]),t._v(" "),a("tr",[a("td",[t._v("JCacheCacheManager")]),t._v(" "),a("td",[t._v("支持JCache（JSR-107）标准的实现作为缓存技术")])]),t._v(" "),a("tr",[a("td",[t._v("CaffeineCacheManager")]),t._v(" "),a("td",[t._v("使用 Caffeine 作为缓存技术。用于取代 Guava 缓存技术。")])]),t._v(" "),a("tr",[a("td",[t._v("RedisCacheManager")]),t._v(" "),a("td",[t._v("使用Redis作为缓存技术")])]),t._v(" "),a("tr",[a("td",[t._v("HazelcastCacheManager")]),t._v(" "),a("td",[t._v("使用Hazelcast作为缓存技术")])]),t._v(" "),a("tr",[a("td",[t._v("CompositeCacheManager")]),t._v(" "),a("td",[t._v("用于组合 CacheManager，可以从多个 CacheManager 中轮询得到相应的缓存")])])])]),t._v(" "),a("h2",{attrs:{id:"二、基于声明式注解的缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、基于声明式注解的缓存"}},[t._v("#")]),t._v(" 二、基于声明式注解的缓存")]),t._v(" "),a("p",[t._v("对于缓存声明，Spring提供了一组 Java 注解：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@Cacheable")]),t._v(" : 触发添加缓存")]),t._v(" "),a("li",[a("code",[t._v("@CacheEvict")]),t._v(" : 触发缓存清除")]),t._v(" "),a("li",[a("code",[t._v("@CachePut")]),t._v("：在不影响方法执行的情况下更新缓存。")]),t._v(" "),a("li",[a("code",[t._v("@Caching")]),t._v("：重新组合要在一个方法上应用的多个缓存操作。")]),t._v(" "),a("li",[a("code",[t._v("@CacheConfig")]),t._v("：在类级别共享一些与缓存有关的常见设置。")])]),t._v(" "),a("h3",{attrs:{id:"_1、-enablecaching-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-enablecaching-注解"}},[t._v("#")]),t._v(" 1、@EnableCaching 注解")]),t._v(" "),a("p",[t._v("开启缓存功能")]),t._v(" "),a("h3",{attrs:{id:"_2、-cacheconfig-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、-cacheconfig-注解"}},[t._v("#")]),t._v(" 2、@CacheConfig 注解")]),t._v(" "),a("p",[t._v("可以在类级别上标注一些共用的缓存属性。（所有方法共享，@since 4.1）")]),t._v(" "),a("h3",{attrs:{id:"_3、-cacheable-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、-cacheable-注解"}},[t._v("#")]),t._v(" 3、@Cacheable 注解")]),t._v(" "),a("p",[t._v("根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("属性")])]),t._v(" "),a("th",[a("strong",[t._v("解释")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("value")]),t._v(" "),a("td",[t._v("缓存名，必填，用于指定缓存存储的集合名。")])]),t._v(" "),a("tr",[a("td",[t._v("cacheNames")]),t._v(" "),a("td",[t._v("与 value 差不多，二选一即可")])]),t._v(" "),a("tr",[a("td",[t._v("key")]),t._v(" "),a("td",[t._v("可选属性，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如："),a("code",[t._v('@Cacheable(key = "#p0")')]),t._v("：使用函数第一个参数作为缓存的key值")])]),t._v(" "),a("tr",[a("td",[t._v("keyGenerator")]),t._v(" "),a("td",[t._v("key的生成器。非必需。若需要指定一个自定义的key生成器，我们需要去实现"),a("code",[t._v("org.springframework.cache.interceptor.KeyGenerator")]),t._v("接口，并使用该参数来指定。需要注意的是：该参数与"),a("strong",[t._v("key")]),t._v("是互斥的")])]),t._v(" "),a("tr",[a("td",[t._v("cacheManager")]),t._v(" "),a("td",[t._v("指定缓存管理器")])]),t._v(" "),a("tr",[a("td",[t._v("cacheResolver")]),t._v(" "),a("td",[t._v("指定获取解析器，用于指定使用那个缓存解析器，非必需。需通过"),a("code",[t._v("org.springframework.cache.interceptor.CacheResolver")]),t._v("接口来实现自己的缓存解析器，并用该参数指定。")])]),t._v(" "),a("tr",[a("td",[t._v("condition")]),t._v(" "),a("td",[t._v("缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：·、"),a("code",[t._v('@Cacheable(key = "#p0", condition = "#p0.length() < 3")')]),t._v("，表示只有当第一个参数的长度小于3的时候才会被缓存")])]),t._v(" "),a("tr",[a("td",[t._v("unless")]),t._v(" "),a("td",[t._v("另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。")])]),t._v(" "),a("tr",[a("td",[t._v("sync")]),t._v(" "),a("td",[t._v("是否使用异步模式，默认为false")])])])]),t._v(" "),a("h3",{attrs:{id:"_4、-cacheput-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、-cacheput-注解"}},[t._v("#")]),t._v(" 4、@CachePut 注解")]),t._v(" "),a("p",[t._v("主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 "),a("code",[t._v("@Cacheable")]),t._v(" 不同的是，"),a("em",[t._v("它每次都会触发真实方法的调用")]),t._v(" 。简单来说就是用户更新缓存数据。但需要注意的是该注解的 "),a("code",[t._v("value")]),t._v(" 和 "),a("code",[t._v("key")]),t._v(" 必须与要更新的缓存相同，也就是与"),a("code",[t._v("@Cacheable")]),t._v("相同。")]),t._v(" "),a("h3",{attrs:{id:"_5、-cacheevict-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、-cacheevict-注解"}},[t._v("#")]),t._v(" 5、@CacheEvict 注解")]),t._v(" "),a("p",[t._v("通常用在删除方法上，用来从"),a("strong",[t._v("缓存中移除")]),t._v("相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("属性")])]),t._v(" "),a("th",[a("strong",[t._v("解释")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("allEntries")]),t._v(" "),a("td",[t._v("非必需，默认为false。当为true时，会移除所有数据。如："),a("code",[t._v('@CachEvict(value="users",allEntries=true)')])])]),t._v(" "),a("tr",[a("td",[t._v("beforeInvocation")]),t._v(" "),a("td",[t._v("非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。 如："),a("code",[t._v('@CachEvict(value="users"，beforeInvocation=true)')])])])])]),t._v(" "),a("h3",{attrs:{id:"_6、-caching-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、-caching-注解"}},[t._v("#")]),t._v(" 6、@Caching 注解")]),t._v(" "),a("p",[t._v("该注解可以实现同一个方法上同时使用多种注解。可从其源码看出：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("METHOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Caching")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cacheable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cacheable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CachePut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CacheEvict")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("evict")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h2",{attrs:{id:"三、spel上下文数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、spel上下文数据"}},[t._v("#")]),t._v(" 三、SpEL上下文数据")]),t._v(" "),a("h3",{attrs:{id:"_1、spel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、spel"}},[t._v("#")]),t._v(" 1、SpEL")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("位置")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("methodName")]),t._v(" "),a("td",[t._v("root对象")]),t._v(" "),a("td",[t._v("当前被调用的方法名")]),t._v(" "),a("td",[a("code",[t._v("#root.methodname")])])]),t._v(" "),a("tr",[a("td",[t._v("method")]),t._v(" "),a("td",[t._v("root对象")]),t._v(" "),a("td",[t._v("当前被调用的方法")]),t._v(" "),a("td",[a("code",[t._v("#root.method.name")])])]),t._v(" "),a("tr",[a("td",[t._v("target")]),t._v(" "),a("td",[t._v("root对象")]),t._v(" "),a("td",[t._v("当前被调用的目标对象实例")]),t._v(" "),a("td",[a("code",[t._v("#root.target")])])]),t._v(" "),a("tr",[a("td",[t._v("targetClass")]),t._v(" "),a("td",[t._v("root对象")]),t._v(" "),a("td",[t._v("当前被调用的目标对象的类")]),t._v(" "),a("td",[a("code",[t._v("#root.targetClass")])])]),t._v(" "),a("tr",[a("td",[t._v("args")]),t._v(" "),a("td",[t._v("root对象")]),t._v(" "),a("td",[t._v("当前被调用的方法的参数列表")]),t._v(" "),a("td",[a("code",[t._v("#root.args[0]")])])]),t._v(" "),a("tr",[a("td",[t._v("caches")]),t._v(" "),a("td",[t._v("root对象")]),t._v(" "),a("td",[t._v("当前方法调用使用的缓存列表")]),t._v(" "),a("td",[a("code",[t._v("#root.caches[0].name")])])]),t._v(" "),a("tr",[a("td",[t._v("Argument Name")]),t._v(" "),a("td",[t._v("执行上下文")]),t._v(" "),a("td",[t._v("当前被调用的方法的参数，如findUser(User user),可以通过#user.id获得参数")]),t._v(" "),a("td",[a("code",[t._v("#user.id")])])]),t._v(" "),a("tr",[a("td",[t._v("result")]),t._v(" "),a("td",[t._v("执行上下文")]),t._v(" "),a("td",[t._v("方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict的beforeInvocation=false）")]),t._v(" "),a("td",[a("code",[t._v("#result")])])])])]),t._v(" "),a("p",[a("strong",[t._v("注意：")])]),t._v(" "),a("p",[t._v("当我们要使用root对象的属性作为key时我们也可以将“#root”省略，因为Spring默认使用的就是root对象的属性。 如")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Cacheable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"targetClass + methodName +#p0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("使用方法参数时我们可以直接使用"),a("code",[t._v("#参数名")]),t._v("或者"),a("code",[t._v("#p参数index")]),t._v("。 如：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Cacheable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Cacheable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#p0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-、spel提供了多种运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-、spel提供了多种运算符"}},[t._v("#")]),t._v(" 2 、SpEL提供了多种运算符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("类型")])]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("运算符")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("关系")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("<，>，<=，>=，==，!=，lt，gt，le，ge，eq，ne")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("算术")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("+，- ，* ，/，%，^")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("&&，||，!，and，or，not，between，instanceof")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("条件")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("?: (ternary)，?: (elvis)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("正则表达式")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("matches")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("其他类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("?.，?[…]，![…]，^[…]，$[…]")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
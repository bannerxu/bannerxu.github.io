(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{498:function(r,t,e){"use strict";e.r(t);var o=e(0),a=Object(o.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h2",{attrs:{id:"docker简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker简介"}},[r._v("#")]),r._v(" Docker简介")]),r._v(" "),t("h3",{attrs:{id:"为什么会有docker出现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有docker出现"}},[r._v("#")]),r._v(" "),t("a",{attrs:{href:"https://juejin.im/post/6844904015675785224",target:"_blank",rel:"noopener noreferrer"}},[r._v("为什么会有Docker出现"),t("OutboundLink")],1)]),r._v(" "),t("h3",{attrs:{id:"微服务为什么一定要用docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务为什么一定要用docker"}},[r._v("#")]),r._v(" "),t("a",{attrs:{href:"https://image.xuguoliang.top/2020/08/02/OPxiEQE0FsjJpQtipzFyWQ_meicJ9.jpg",target:"_blank",rel:"noopener noreferrer"}},[r._v("微服务为什么一定要用Docker"),t("OutboundLink")],1)]),r._v(" "),t("p",[r._v("Docker是供开发人员和系统管理员 使用容器"),t("strong",[r._v("构建，运行和共享")]),r._v("应用程序的平台。使用容器部署应用程序称为"),t("em",[r._v("容器化")]),r._v("。容器不是新的，但用于轻松部署应用程序的容器却是新的。\n容器化越来越受欢迎，因为容器是：")]),r._v(" "),t("ul",[t("li",[t("strong",[r._v("灵活")]),r._v("：即使最复杂的应用程序也可以容器化。")]),r._v(" "),t("li",[t("strong",[r._v("轻量级")]),r._v("：容器利用并共享了主机内核，在系统资源方面比虚拟机更有效。")]),r._v(" "),t("li",[t("strong",[r._v("可移植性")]),r._v("：您可以在本地构建，部署到云并在任何地方运行。")]),r._v(" "),t("li",[t("strong",[r._v("松散耦合")]),r._v("：容器是高度自给自足并封装的容器，使您可以在不破坏其他容器的情况下更换或升级它们。")]),r._v(" "),t("li",[t("strong",[r._v("可扩展")]),r._v("：您可以在数据中心内增加并自动分布容器副本。")]),r._v(" "),t("li",[t("strong",[r._v("安全")]),r._v("：容器将积极的约束和隔离应用于流程，而无需用户方面的任何配置。")])]),r._v(" "),t("h2",{attrs:{id:"一次构建、随处运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一次构建、随处运行"}},[r._v("#")]),r._v(" 一次构建、随处运行")]),r._v(" "),t("h3",{attrs:{id:"能做什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#能做什么"}},[r._v("#")]),r._v(" 能做什么")]),r._v(" "),t("ul",[t("li",[r._v("更快速的应用交付和部署\n"),t("ul",[t("li",[r._v("传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。")])])]),r._v(" "),t("li",[r._v("更便捷的升级和扩缩容\n"),t("ul",[t("li",[r._v("随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。")])])]),r._v(" "),t("li",[r._v("更简单的系统运维\n"),t("ul",[t("li",[r._v("应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。")])])]),r._v(" "),t("li",[r._v("更高效的计算资源利用\n"),t("ul",[t("li",[r._v("Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。")])])])]),r._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[r._v("#")]),r._v(" 基本概念")]),r._v(" "),t("p",[r._v("Docker 包括三个基本概念:")]),r._v(" "),t("ul",[t("li",[r._v("镜像（Image）")]),r._v(" "),t("li",[r._v("容器（Container）")]),r._v(" "),t("li",[r._v("仓库（Repository）")])]),r._v(" "),t("h3",{attrs:{id:"docker镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像"}},[r._v("#")]),r._v(" Docker镜像")]),r._v(" "),t("p",[t("strong",[r._v("Docker镜像（Image）类似于虚拟机的镜像，可以将他理解为一个面向Docker引擎的只读模板，包含了文件系统。")]),r._v("\n例如：一个镜像可以完全包含了Ubuntu操作系统环境，可以把它称作一个Ubuntu镜像。镜像也可以安装了Apache应用程序（或其他软件），可以把它称为一个Apache镜像。\n镜像是创建Docker容器的基础，通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。用户可以从网上下载一个已经做好的应用镜像，并通过命令直接使用。总之，应用运行是需要环境的，而镜像就是来提供这种环境。")]),r._v(" "),t("h3",{attrs:{id:"docker容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker容器"}},[r._v("#")]),r._v(" Docker容器")]),r._v(" "),t("p",[t("strong",[r._v("Docker容器（Container）类似于一个轻量级的沙箱子（因为Docker是基于Linux内核的虚拟技术，所以消耗资源十分少），Docker利用容器来运行和隔离应用。")]),r._v("\n容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器都是相互隔离、互不可见的。\n可以吧每个容器看作一个简易版的Linux系统环境（包括了root用户权限、进程空间、用户空间和网络空间），以及与运行在其中的应用程序打包而成的应用盒子。\n镜像自身是只读的。容器从镜像启动的时候，Docker会在镜像的最上层创建一个可写层，镜像本身将保持不变。就像用ISO装系统之后，ISO并没有什么变化一样。")]),r._v(" "),t("h3",{attrs:{id:"docker仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker仓库"}},[r._v("#")]),r._v(" Docker仓库")]),r._v(" "),t("p",[t("strong",[r._v("Docker仓库（Repository）类似与代码仓库，是Docker集中存放镜像文件的场所。")]),r._v("\n有时候会看到有资料将Docker仓库和注册服务器（Registry）混为一谈，并不严格区分。实际上，注册服务器是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来进行区分。例如存放Ubuntu操作系统镜像的仓库，称为Ubuntu仓库，其中可能包括14.04,12.04等不同版本的镜像。\n根据存储的镜像公开分享与否，Docker仓库分为公开仓库（Public）和私有仓库（Private）两种形式。\n目前，最大的公开仓库是Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括Docker Pool等，可以提供稳定的国内访问。如果用户不希望公开分享自己的镜像文件，Docker也支持用户在本地网络内创建一个只能自己访问的私有仓库。\n当用户创建了自己的镜像之后就可以使用push将它上传到指定的公有或则私有仓库。这样用户下次在另一台机器上使用该镜像时，只需将其从仓库pull下来就可以了。")])])}),[],!1,null,null,null);t.default=a.exports}}]);
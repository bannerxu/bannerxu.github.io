(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{513:function(s,t,n){"use strict";n.r(t);var a=n(0),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("java.util.concurrent在并发编程中使用的工具类")])]),s._v(" "),t("h2",{attrs:{id:"进程-线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程-线程"}},[s._v("#")]),s._v(" 进程/线程")]),s._v(" "),t("h3",{attrs:{id:"_1、进程-线程是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程-线程是什么"}},[s._v("#")]),s._v(" 1、进程/线程是什么？")]),s._v(" "),t("p",[s._v("进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。")]),s._v(" "),t("p",[s._v("线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器，一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。")]),s._v(" "),t("p",[s._v("一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行。")]),s._v(" "),t("p",[s._v("相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。")]),s._v(" "),t("h3",{attrs:{id:"_2、线程状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程状态"}},[s._v("#")]),s._v(" 2、线程状态？")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * A thread state.  A thread can be in one of the following states:\n     * <ul>\n     * <li>{@link #NEW}<br>\n     *     A thread that has not yet started is in this state.\n     *     </li>\n     * <li>{@link #RUNNABLE}<br>\n     *     A thread executing in the Java virtual machine is in this state.\n     *     </li>\n     * <li>{@link #BLOCKED}<br>\n     *     A thread that is blocked waiting for a monitor lock\n     *     is in this state.\n     *     </li>\n     * <li>{@link #WAITING}<br>\n     *     A thread that is waiting indefinitely for another thread to\n     *     perform a particular action is in this state.\n     *     </li>\n     * <li>{@link #TIMED_WAITING}<br>\n     *     A thread that is waiting for another thread to perform an action\n     *     for up to a specified waiting time is in this state.\n     *     </li>\n     * <li>{@link #TERMINATED}<br>\n     *     A thread that has exited is in this state.\n     *     </li>\n     * </ul>\n     *\n     * <p>\n     * A thread can be in only one state at a given point in time.\n     * These states are virtual machine states which do not reflect\n     * any operating system thread states.\n     *\n     * @since   1.5\n     * @see #getState\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("State")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 尚未启动的线程的线程状态。\n         */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NEW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，\n   \t\t\t * 但可能正在等待来自操作系统的其他资源，例如处理器。\n         */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RUNNABLE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n\t\t\t\t * 线程的线程状态被阻塞，等待监视器锁定。\n         */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCKED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 等待线程的线程状态。\n         * Thread state for a waiting thread.\n         * A thread is in the waiting state due to calling one of the\n         * following methods:\n         * <ul>\n         *   <li>{@link Object#wait() Object.wait} with no timeout</li>\n         *   <li>{@link #join() Thread.join} with no timeout</li>\n         *   <li>{@link LockSupport#park() LockSupport.park}</li>\n         * </ul>\n         *\n         * <p>A thread in the waiting state is waiting for another thread to\n         * perform a particular action.\n         *\n         * For example, a thread that has called <tt>Object.wait()</tt>\n         * on an object is waiting for another thread to call\n         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on\n         * that object. A thread that has called <tt>Thread.join()</tt>\n         * is waiting for a specified thread to terminate.\n         */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAITING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 具有指定等待时间的等待线程的线程状态。\n         * Thread state for a waiting thread with a specified waiting time.\n         * A thread is in the timed waiting state due to calling one of\n         * the following methods with a specified positive waiting time:\n         * <ul>\n         *   <li>{@link #sleep Thread.sleep}</li>\n         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>\n         *   <li>{@link #join(long) Thread.join} with timeout</li>\n         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>\n         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>\n         * </ul>\n         */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIMED_WAITING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n         * 终止线程的线程状态。\n         * Thread state for a terminated thread.\n         * The thread has completed execution.\n         */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TERMINATED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br")])]),t("h3",{attrs:{id:"_3、wait-sleep的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、wait-sleep的区别"}},[s._v("#")]),s._v(" 3、wait/sleep的区别？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("wait只能在同步（synchronize）环境中被调用，而sleep不需要。")])]),s._v(" "),t("li",[t("p",[s._v("进入wait状态的线程能够被notify和notifyAll线程唤醒，但是进入sleeping状态的线程不能被notify方法唤醒。")])]),s._v(" "),t("li",[t("p",[s._v("wait通常有条件地执行，线程会一直处于wait状态，直到某个条件变为真。但是sleep仅仅让你的线程进入睡眠状态。")])]),s._v(" "),t("li",[t("p",[s._v("wait方法在进入wait状态的时候会释放对象的锁，但是sleep方法不会。")])]),s._v(" "),t("li",[t("p",[s._v("wait方法是针对一个被同步代码块加锁的对象，而sleep是针对一个线程。")])])]),s._v(" "),t("h3",{attrs:{id:"_4、什么是并发-什么是并行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、什么是并发-什么是并行"}},[s._v("#")]),s._v(" 4、什么是并发？什么是并行？")]),s._v(" "),t("p",[t("strong",[s._v("并发和并行")]),s._v("是两个非常容易混淆的概念。它们都可以表示两个或多个任务一起执行，但是偏重点有点不同。并发偏重于多个任务交替执行，而多个任务之间有可能还是串行的。并发是逻辑上的同时发生（simultaneous），而并行是物理上的同时发生。然而并行的偏重点在于”同时执行”。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://image.xuguoliang.top/2020/09/24/view.png",alt:"preview"}})]),s._v(" "),t("p",[t("strong",[s._v("并行(parallel)")]),s._v("：指在同一时刻，有多条指令在多个处理器上同时执行。就好像两个人各拿一把铁锨在挖坑，一小时后，每人一个大坑。所以无论从微观还是从宏观来看，二者都是一起执行的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://image.xuguoliang.top/2020/09/24/bV1GiB.png",alt:"图片描述"}})]),s._v(" "),t("p",[t("strong",[s._v("并发(concurrency)")]),s._v("：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。这就好像两个人用同一把铁锨，轮流挖坑，一小时后，两个人各挖一个小一点的坑，要想挖两个大一点得坑，一定会用两个小时。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://image.xuguoliang.top/2020/09/24/bV1GiJ.png",alt:"图片描述"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);
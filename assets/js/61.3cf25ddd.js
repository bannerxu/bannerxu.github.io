(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{488:function(t,e,r){"use strict";r.r(e);var a=r(0),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"simple-java-security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-java-security"}},[t._v("#")]),t._v(" Simple  Java  Security")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://shiro.apache.org/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("Apache Shiro™")]),t._v(" is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.")])]),t._v(" "),e("p",[t._v("Apache Shiro™是一个功能强大且易于使用的Java安全框架，它执行身份验证，授权，加密和会话管理。 使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序-从最小的移动应用程序到最大的Web和企业应用程序。")]),t._v(" "),e("h3",{attrs:{id:"shiro功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shiro功能"}},[t._v("#")]),t._v(" shiro功能")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://shiro.apache.org/introduction.html#apache-shiro-features",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache Shiro Features"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://image.xuguoliang.top/2020/07/20/X1ysNS_6wVM0a.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("Authentication")]),t._v("：身份认证/登录，验证用户是不是拥有相应的身份；")]),t._v(" "),e("p",[e("strong",[t._v("Authorization")]),t._v("：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；")]),t._v(" "),e("p",[e("strong",[t._v("Session Manager")]),t._v("：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；")]),t._v(" "),e("p",[e("strong",[t._v("Cryptography")]),t._v("：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；")]),t._v(" "),e("p",[e("strong",[t._v("Web Support")]),t._v("：Web 支持，可以非常容易的集成到Web 环境；")]),t._v(" "),e("p",[e("strong",[t._v("Caching")]),t._v("：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；")]),t._v(" "),e("p",[e("strong",[t._v("Concurrency")]),t._v("：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；")]),t._v(" "),e("p",[e("strong",[t._v("Testing")]),t._v("：提供测试支持；")]),t._v(" "),e("p",[e("strong",[t._v("Run As")]),t._v("：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；")]),t._v(" "),e("p",[e("strong",[t._v("Remember Me")]),t._v("：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。")]),t._v(" "),e("h3",{attrs:{id:"三个核心组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个核心组件"}},[t._v("#")]),t._v(" 三个核心组件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://image.xuguoliang.top/2020/07/20/tZNPGX_AzR6YD.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("Subject")]),t._v("：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject 都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；")]),t._v(" "),e("p",[e("strong",[t._v("SecurityManager")]),t._v("：安全管理器；即所有与安全有关的操作都会与SecurityManager 交互；且它管理着所有Subject；可以看出它是Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；")]),t._v(" "),e("p",[e("strong",[t._v("Realm")]),t._v("：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。")]),t._v(" "),e("h3",{attrs:{id:"shiro-运行原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shiro-运行原理"}},[t._v("#")]),t._v(" Shiro 运行原理")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://image.xuguoliang.top/2020/07/20/fibMUr_8nhEBL.jpg",alt:""}})]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("Subject")]),t._v("：主体，可以看到主体可以是任何可以与应用交互的“用户”；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SecurityManager")]),t._v(" ：相当于SpringMVC 中的DispatcherServlet 或者Struts2 中的")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("FilterDispatcher")]),t._v("；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Authenticator")]),t._v("：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Authrizer")]),t._v("：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Realms")]),t._v("：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC 实现，也可以是LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SessionManager")]),t._v("：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro 并不仅仅可以用在Web 环境，也可以用在如普通的JavaSE 环境、EJB 等环境；所有呢，Shiro 就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web 环境用，刚开始是一台Web 服务器；接着又上了台EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SessionDAO")]),t._v("：DAO 大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC 写到数据库；比如想把Session 放到Memcached 中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("CacheManager")]),t._v("：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Cryptography")]),t._v("：密码模块，Shiro 提高了一些常见的加密组件用于如密码加密/解密的。")])])]),t._v(" "),e("p",[t._v("具体代码查看"),e("a",{attrs:{href:"https://gitee.com/bannerXu/shiro-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("码云"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);
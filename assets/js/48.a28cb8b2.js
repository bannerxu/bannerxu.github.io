(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{475:function(s,e,n){"use strict";n.r(e);var t=n(0),a=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"一个示例回顾future"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个示例回顾future"}},[s._v("#")]),s._v(" 一个示例回顾Future")]),s._v(" "),e("p",[s._v("一些业务场景我们需要使用多线程异步执行任务，加快任务执行速度。")]),s._v(" "),e("p",[s._v("JDK5新增了"),e("code",[s._v("Future")]),s._v("接口，用于描述一个异步计算的结果。")]),s._v(" "),e("p",[s._v("虽然 Future 以及相关使用方法提供了异步执行任务的能力，但是对于结果的获取却是很不方便，我们必须使用"),e("code",[s._v("Future.get()")]),s._v("的方式阻塞调用线程，或者使用轮询方式判断 "),e("code",[s._v("Future.isDone")]),s._v(" 任务是否结束，再获取结果。")]),s._v(" "),e("p",[s._v("这两种处理方式都不是很优雅，相关代码如下:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testFuture() throws ExecutionException, InterruptedException {  \n    ExecutorService executorService = Executors.newFixedThreadPool(5);  \n    Future<String> future = executorService.submit(() -> {  \n        Thread.sleep(2000);  \n        return "hello";  \n    });  \n    System.out.println(future.get());  \n    System.out.println("end");  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("与此同时，Future无法解决多个异步任务需要相互依赖的场景，简单点说就是，主线程需要等待子线程任务执行完毕之后在进行执行，这个时候你可能想到了"),e("code",[s._v("CountDownLatch")]),s._v("，没错确实可以解决，代码如下。")]),s._v(" "),e("p",[s._v("这里定义两个Future，第一个通过用户id获取用户信息，第二个通过商品id获取商品信息。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \n public void testCountDownLatch() throws InterruptedException, ExecutionException {  \n     ExecutorService executorService = Executors.newFixedThreadPool(5);  \n     CountDownLatch downLatch = new CountDownLatch(2);  \n     long startTime = System.currentTimeMillis();  \n     Future<String> userFuture = executorService.submit(() -> {  \n         //模拟查询商品耗时500毫秒  \n         Thread.sleep(500);  \n         downLatch.countDown();  \n         return "用户A";  \n     });  \n\n     Future<String> goodsFuture = executorService.submit(() -> {  \n         //模拟查询商品耗时500毫秒  \n         Thread.sleep(400);  \n         downLatch.countDown();  \n         return "商品A";  \n     });  \n\n     downLatch.await();  \n     //模拟主程序耗时时间  \n     Thread.sleep(600);  \n     System.out.println("获取用户信息:" + userFuture.get());  \n     System.out.println("获取商品信息:" + goodsFuture.get());  \n     System.out.println("总共用时" + (System.currentTimeMillis() - startTime) + "ms");  \n\n }  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[e("strong",[s._v("「运行结果」")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("获取用户信息:用户A  \n获取商品信息:商品A  \n总共用时1110ms  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("从运行结果可以看出结果都已经获取，而且如果我们不用异步操作，执行时间应该是:"),e("code",[s._v("500+400+600 = 1500")]),s._v("，用异步操作后实际只用1110。")]),s._v(" "),e("p",[s._v("但是Java8以后我不在认为这是一种优雅的解决方式，接下来来了解下"),e("code",[s._v("CompletableFuture")]),s._v("的使用。")]),s._v(" "),e("h2",{attrs:{id:"通过completablefuture实现上面示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过completablefuture实现上面示例"}},[s._v("#")]),s._v(" 通过CompletableFuture实现上面示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableInfo() throws InterruptedException, ExecutionException {  \n    long startTime = System.currentTimeMillis();  \n\n      //调用用户服务获取用户基本信息  \n      CompletableFuture<String> userFuture = CompletableFuture.supplyAsync(() ->  \n              //模拟查询商品耗时500毫秒  \n      {  \n          try {  \n              Thread.sleep(500);  \n          } catch (InterruptedException e) {  \n              e.printStackTrace();  \n          }  \n          return "用户A";  \n      });  \n\n      //调用商品服务获取商品基本信息  \n      CompletableFuture<String> goodsFuture = CompletableFuture.supplyAsync(() ->  \n              //模拟查询商品耗时500毫秒  \n      {  \n          try {  \n              Thread.sleep(400);  \n          } catch (InterruptedException e) {  \n              e.printStackTrace();  \n          }  \n          return "商品A";  \n      });  \n\n      System.out.println("获取用户信息:" + userFuture.get());  \n      System.out.println("获取商品信息:" + goodsFuture.get());  \n\n      //模拟主程序耗时时间  \n      Thread.sleep(600);  \n      System.out.println("总共用时" + (System.currentTimeMillis() - startTime) + "ms");  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[s._v("运行结果")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("获取用户信息:用户A  \n获取商品信息:商品A  \n总共用时1112ms  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("通过"),e("code",[s._v("CompletableFuture")]),s._v("可以很轻松的实现"),e("code",[s._v("CountDownLatch")]),s._v("的功能，你以为这就结束了，远远不止，"),e("code",[s._v("CompletableFuture")]),s._v("比这要强多了。")]),s._v(" "),e("p",[e("strong",[s._v("比如可以实现")]),s._v(" ：任务1执行完了再执行任务2,甚至任务1执行的结果，作为任务2的入参数等等强大功能，下面就来学学"),e("code",[s._v("CompletableFuture")]),s._v("的API。")]),s._v(" "),e("h2",{attrs:{id:"completablefuture创建方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture创建方式"}},[s._v("#")]),s._v(" CompletableFuture创建方式")]),s._v(" "),e("h3",{attrs:{id:"_1、常用的4种创建方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、常用的4种创建方式"}},[s._v("#")]),s._v(" 1、常用的4种创建方式")]),s._v(" "),e("p",[e("code",[s._v("CompletableFuture")]),s._v("源码中有四个静态方法用来执行异步任务")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier){..}  \npublic static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,Executor executor){..}  \npublic static CompletableFuture<Void> runAsync(Runnable runnable){..}  \npublic static CompletableFuture<Void> runAsync(Runnable runnable,Executor executor){..}  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("一般我们用上面的静态方法来创建"),e("code",[s._v("CompletableFuture")]),s._v("，这里也解释下他们的区别:")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("「supplyAsync」")]),s._v(" 执行任务，支持返回值。")]),s._v(" "),e("li",[e("strong",[s._v("「runAsync」")]),s._v(" 执行任务，没有返回值。")])]),s._v(" "),e("p",[e("strong",[s._v("「supplyAsync方法」")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//使用默认内置线程池ForkJoinPool.commonPool()，根据supplier构建执行任务  \npublic static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)  \n//自定义线程，根据supplier构建执行任务  \npublic static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor)  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("「runAsync方法」")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//使用默认内置线程池ForkJoinPool.commonPool()，根据runnable构建执行任务  \npublic static CompletableFuture<Void> runAsync(Runnable runnable)   \n//自定义线程，根据runnable构建执行任务  \npublic static CompletableFuture<Void> runAsync(Runnable runnable,  Executor executor)  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"_2、结果获取的4种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、结果获取的4种方式"}},[s._v("#")]),s._v(" 2、结果获取的4种方式")]),s._v(" "),e("p",[s._v("对于结果的获取"),e("code",[s._v("CompltableFuture")]),s._v("类提供了四种方式")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//方式一  \npublic T get()  \n//方式二  \npublic T get(long timeout, TimeUnit unit)  \n//方式三  \npublic T getNow(T valueIfAbsent)  \n//方式四  \npublic T join()  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("说明：")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("「get()和get(long timeout, TimeUnit unit)」")]),s._v(" => 在Future中就已经提供了，后者提供超时处理，如果在指定时间内未获取结果将抛出超时异常")]),s._v(" "),e("li",[e("strong",[s._v("「getNow」")]),s._v(" => 立即获取结果不阻塞，结果计算已完成将返回结果或计算过程中的异常，如果未计算完成将返回设定的valueIfAbsent值")]),s._v(" "),e("li",[e("strong",[s._v("「join」")]),s._v(" => 方法里不会抛出异常")])]),s._v(" "),e("p",[s._v("示例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableGet() throws InterruptedException, ExecutionException {  \n\n    CompletableFuture<String> cp1 = CompletableFuture.supplyAsync(() -> {  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        return "商品A";  \n    });  \n\n    // getNow方法测试   \n    System.out.println(cp1.getNow("商品B"));  \n\n    //join方法测试   \n    CompletableFuture<Integer> cp2 = CompletableFuture.supplyAsync((() -> 1 / 0));  \n    System.out.println(cp2.join());  \n   System.out.println("-----------------------------------------------------");  \n    //get方法测试  \n    CompletableFuture<Integer> cp3 = CompletableFuture.supplyAsync((() -> 1 / 0));  \n    System.out.println(cp3.get());  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[e("strong",[s._v("「运行结果」")]),s._v(" ：")]),s._v(" "),e("ul",[e("li",[s._v("第一个执行结果为 "),e("strong",[s._v("「商品B」")]),s._v(" ，因为要先睡上1秒结果不能立即获取")]),s._v(" "),e("li",[s._v("join方法获取结果方法里不会抛异常，但是执行结果会抛异常，抛出的异常为"),e("code",[s._v("CompletionException")])]),s._v(" "),e("li",[s._v("get方法获取结果方法里将抛出异常，执行结果抛出的异常为"),e("code",[s._v("ExecutionException")])])]),s._v(" "),e("h2",{attrs:{id:"异步回调方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步回调方法"}},[s._v("#")]),s._v(" 异步回调方法")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://image.xuguoliang.top/2023/10/05/640-YnSoWP.jpeg",alt:"图片"}})]),s._v(" "),e("h3",{attrs:{id:"_1、thenrun-thenrunasync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、thenrun-thenrunasync"}},[s._v("#")]),s._v(" 1、thenRun/thenRunAsync")]),s._v(" "),e("p",[s._v("通俗点讲就是，"),e("strong",[s._v("「做完第一个任务后，再做第二个任务,第二个任务也没有返回值」")]),s._v(" 。")]),s._v(" "),e("p",[s._v("示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableThenRunAsync() throws InterruptedException, ExecutionException {  \n    long startTime = System.currentTimeMillis();  \n      \n    CompletableFuture<Void> cp1 = CompletableFuture.runAsync(() -> {  \n        try {  \n            //执行任务A  \n            Thread.sleep(600);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n\n    });  \n\n    CompletableFuture<Void> cp2 =  cp1.thenRun(() -> {  \n        try {  \n            //执行任务B  \n            Thread.sleep(400);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n    });  \n\n    // get方法测试  \n    System.out.println(cp2.get());  \n\n    //模拟主程序耗时时间  \n    Thread.sleep(600);  \n    System.out.println("总共用时" + (System.currentTimeMillis() - startTime) + "ms");  \n}  \n  \n//运行结果    \n/**  \n *  null  \n *  总共用时1610ms  \n */  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("p",[e("strong",[s._v("「thenRun 和thenRunAsync有什么区别呢？」")])]),s._v(" "),e("p",[s._v("如果你执行第一个任务的时候，传入了一个自定义线程池：")]),s._v(" "),e("ul",[e("li",[s._v("调用thenRun方法执行第二个任务时，则第二个任务和第一个任务是共用同一个线程池。")]),s._v(" "),e("li",[s._v("调用"),e("code",[s._v("thenRunAsync")]),s._v("执行第二个任务时，则第一个任务使用的是你自己传入的线程池，第二个任务使用的是ForkJoin线程池。")])]),s._v(" "),e("p",[s._v("说明: 后面介绍的"),e("code",[s._v("thenAccept")]),s._v("和"),e("code",[s._v("thenAcceptAsync")]),s._v("，"),e("code",[s._v("thenApply")]),s._v("和"),e("code",[s._v("thenApplyAsync")]),s._v("等，它们之间的区别也是这个。")]),s._v(" "),e("h3",{attrs:{id:"_2、thenaccept-thenacceptasync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、thenaccept-thenacceptasync"}},[s._v("#")]),s._v(" 2、thenAccept/thenAcceptAsync")]),s._v(" "),e("p",[s._v("第一个任务执行完成后，执行第二个回调方法任务，"),e("strong",[s._v("会将该任务的执行结果，作为入参")]),s._v(" ，传递到回调方法中，但是回调方法是没有返回值的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('示例\n@Test  \npublic void testCompletableThenAccept() throws ExecutionException, InterruptedException {  \n    long startTime = System.currentTimeMillis();  \n    CompletableFuture<String> cp1 = CompletableFuture.supplyAsync(() -> {  \n        return "dev";  \n\n    });  \n    CompletableFuture<Void> cp2 =  cp1.thenAccept((a) -> {  \n        System.out.println("上一个任务的返回结果为: " + a);  \n    });  \n   \n    cp2.get();  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h3",{attrs:{id:"_3、-thenapply-thenapplyasync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、-thenapply-thenapplyasync"}},[s._v("#")]),s._v(" 3、 thenApply/thenApplyAsync")]),s._v(" "),e("p",[s._v("表示第一个任务执行完成后，执行第二个回调方法任务，会将该任务的执行结果，作为入参，传递到回调方法中，并且回调方法是有返回值的。")]),s._v(" "),e("p",[s._v("示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableThenApply() throws ExecutionException, InterruptedException {  \n    CompletableFuture<String> cp1 = CompletableFuture.supplyAsync(() -> {  \n        return "dev";  \n\n    }).thenApply((a) -> {  \n        if(Objects.equals(a,"dev")){  \n            return "dev";  \n        }  \n        return "prod";  \n    });  \n\n    System.out.println("当前环境为:" + cp1.get());  \n\n    //输出: 当前环境为:dev  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h2",{attrs:{id:"异常回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常回调"}},[s._v("#")]),s._v(" 异常回调")]),s._v(" "),e("p",[s._v("当"),e("code",[s._v("CompletableFuture")]),s._v("的任务不论是正常完成还是出现异常它都会调用 "),e("strong",[s._v("「whenComplete」")]),s._v(" 这回调函数。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("「正常完成」")]),s._v(" ：whenComplete返回结果和上级任务一致，异常为null；")]),s._v(" "),e("li",[e("strong",[s._v("「出现异常」")]),s._v(" ：whenComplete返回结果为null，异常为上级任务的异常；")])]),s._v(" "),e("p",[s._v("即调用"),e("code",[s._v("get()")]),s._v("时，正常完成时就获取到结果，出现异常时就会抛出异常，需要你处理该异常。")]),s._v(" "),e("p",[s._v("下面来看看示例")]),s._v(" "),e("h3",{attrs:{id:"_1、只用whencomplete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、只用whencomplete"}},[s._v("#")]),s._v(" 1、只用whenComplete")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableWhenComplete() throws ExecutionException, InterruptedException {  \n    CompletableFuture<Double> future = CompletableFuture.supplyAsync(() -> {  \n\n        if (Math.random() < 0.5) {  \n            throw new RuntimeException("出错了");  \n        }  \n        System.out.println("正常结束");  \n        return 0.11;  \n\n    }).whenComplete((aDouble, throwable) -> {  \n        if (aDouble == null) {  \n            System.out.println("whenComplete aDouble is null");  \n        } else {  \n            System.out.println("whenComplete aDouble is " + aDouble);  \n        }  \n        if (throwable == null) {  \n            System.out.println("whenComplete throwable is null");  \n        } else {  \n            System.out.println("whenComplete throwable is " + throwable.getMessage());  \n        }  \n    });  \n    System.out.println("最终返回的结果 = " + future.get());  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("正常完成，没有异常时：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("正常结束  \nwhenComplete aDouble is 0.11  \nwhenComplete throwable is null  \n最终返回的结果 = 0.11  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("出现异常时：get()会抛出异常")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("whenComplete aDouble is null  \nwhenComplete throwable is java.lang.RuntimeException: 出错了  \n  \njava.util.concurrent.ExecutionException: java.lang.RuntimeException: 出错了  \n at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)  \n at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"_2、whencomplete-exceptionally示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、whencomplete-exceptionally示例"}},[s._v("#")]),s._v(" 2、whenComplete + exceptionally示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testWhenCompleteExceptionally() throws ExecutionException, InterruptedException {  \n    CompletableFuture<Double> future = CompletableFuture.supplyAsync(() -> {  \n        if (Math.random() < 0.5) {  \n            throw new RuntimeException("出错了");  \n        }  \n        System.out.println("正常结束");  \n        return 0.11;  \n\n    }).whenComplete((aDouble, throwable) -> {  \n        if (aDouble == null) {  \n            System.out.println("whenComplete aDouble is null");  \n        } else {  \n            System.out.println("whenComplete aDouble is " + aDouble);  \n        }  \n        if (throwable == null) {  \n            System.out.println("whenComplete throwable is null");  \n        } else {  \n            System.out.println("whenComplete throwable is " + throwable.getMessage());  \n        }  \n    }).exceptionally((throwable) -> {  \n        System.out.println("exceptionally中异常：" + throwable.getMessage());  \n        return 0.0;  \n    });  \n\n    System.out.println("最终返回的结果 = " + future.get());  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("当出现异常时，"),e("code",[s._v("exceptionally")]),s._v("中会捕获该异常，给出默认返回值0.0。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("whenComplete aDouble is null  \nwhenComplete throwable is java.lang.RuntimeException: 出错了  \nexceptionally中异常：java.lang.RuntimeException: 出错了  \n最终返回的结果 = 0.0  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"多任务组合回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多任务组合回调"}},[s._v("#")]),s._v(" 多任务组合回调")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://image.xuguoliang.top/2023/10/05/640-20231005141849543-2PB7Po.jpeg",alt:"图片"}})]),s._v(" "),e("h4",{attrs:{id:"_1、and组合关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、and组合关系"}},[s._v("#")]),s._v(" 1、AND组合关系")]),s._v(" "),e("p",[e("code",[s._v("thenCombine")]),s._v(" / "),e("code",[s._v("thenAcceptBoth")]),s._v(" / "),e("code",[s._v("runAfterBoth")]),s._v("都表示："),e("strong",[s._v("「当任务一和任务二都完成再执行任务三」")]),s._v(" 。")]),s._v(" "),e("p",[s._v("区别在于：")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("「runAfterBoth」")]),s._v(" 不会把执行结果当做方法入参，且没有返回值")]),s._v(" "),e("li",[e("strong",[s._v("「thenAcceptBoth」")]),s._v(" : 会将两个任务的执行结果作为方法入参，传递到指定方法中，且无返回值")]),s._v(" "),e("li",[e("strong",[s._v("「thenCombine」")]),s._v(" ：会将两个任务的执行结果作为方法入参，传递到指定方法中，且有返回值")])]),s._v(" "),e("p",[s._v("示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableThenCombine() throws ExecutionException, InterruptedException {  \n    //创建线程池  \n    ExecutorService executorService = Executors.newFixedThreadPool(10);  \n    //开启异步任务1  \n    CompletableFuture<Integer> task = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务1，当前线程是：" + Thread.currentThread().getId());  \n        int result = 1 + 1;  \n        System.out.println("异步任务1结束");  \n        return result;  \n    }, executorService);  \n\n    //开启异步任务2  \n    CompletableFuture<Integer> task2 = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务2，当前线程是：" + Thread.currentThread().getId());  \n        int result = 1 + 1;  \n        System.out.println("异步任务2结束");  \n        return result;  \n    }, executorService);  \n\n    //任务组合  \n    CompletableFuture<Integer> task3 = task.thenCombineAsync(task2, (f1, f2) -> {  \n        System.out.println("执行任务3，当前线程是：" + Thread.currentThread().getId());  \n        System.out.println("任务1返回值：" + f1);  \n        System.out.println("任务2返回值：" + f2);  \n        return f1 + f2;  \n    }, executorService);  \n\n    Integer res = task3.get();  \n    System.out.println("最终结果：" + res);  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("p",[e("strong",[s._v("「运行结果」")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("异步任务1，当前线程是：17  \n异步任务1结束  \n异步任务2，当前线程是：18  \n异步任务2结束  \n执行任务3，当前线程是：19  \n任务1返回值：2  \n任务2返回值：2  \n最终结果：4  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h4",{attrs:{id:"_2、or组合关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、or组合关系"}},[s._v("#")]),s._v(" 2、OR组合关系")]),s._v(" "),e("p",[e("code",[s._v("applyToEither")]),s._v(" / "),e("code",[s._v("acceptEither")]),s._v(" / "),e("code",[s._v("runAfterEither")]),s._v(" 都表示："),e("strong",[s._v("「两个任务，只要有一个任务完成，就执行任务三」")]),s._v(" 。")]),s._v(" "),e("p",[s._v("区别在于：")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("「runAfterEither」")]),s._v(" ：不会把执行结果当做方法入参，且没有返回值")]),s._v(" "),e("li",[e("strong",[s._v("「acceptEither」")]),s._v(" : 会将已经执行完成的任务，作为方法入参，传递到指定方法中，且无返回值")]),s._v(" "),e("li",[e("strong",[s._v("「applyToEither」")]),s._v(" ：会将已经执行完成的任务，作为方法入参，传递到指定方法中，且有返回值")])]),s._v(" "),e("p",[s._v("示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableEitherAsync() {  \n    //创建线程池  \n    ExecutorService executorService = Executors.newFixedThreadPool(10);  \n    //开启异步任务1  \n    CompletableFuture<Integer> task = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务1，当前线程是：" + Thread.currentThread().getId());  \n\n        int result = 1 + 1;  \n        System.out.println("异步任务1结束");  \n        return result;  \n    }, executorService);  \n\n    //开启异步任务2  \n    CompletableFuture<Integer> task2 = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务2，当前线程是：" + Thread.currentThread().getId());  \n        int result = 1 + 2;  \n        try {  \n            Thread.sleep(3000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println("异步任务2结束");  \n        return result;  \n    }, executorService);  \n\n    //任务组合  \n    task.acceptEitherAsync(task2, (res) -> {  \n        System.out.println("执行任务3，当前线程是：" + Thread.currentThread().getId());  \n        System.out.println("上一个任务的结果为："+res);  \n    }, executorService);  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("p",[s._v("运行结果")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//通过结果可以看出，异步任务2都没有执行结束，任务3获取的也是1的执行结果  \n异步任务1，当前线程是：17  \n异步任务1结束  \n异步任务2，当前线程是：18  \n执行任务3，当前线程是：19  \n上一个任务的结果为：2  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("注意")]),s._v(" "),e("p",[s._v("如果把上面的核心线程数改为1也就是")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ExecutorService executorService = Executors.newFixedThreadPool(1);  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("运行结果就是下面的了，会发现根本没有执行任务3，显然是任务3直接被丢弃了。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("异步任务1，当前线程是：17  \n异步任务1结束  \n异步任务2，当前线程是：17  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h4",{attrs:{id:"_3、多任务组合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、多任务组合"}},[s._v("#")]),s._v(" 3、多任务组合")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("「allOf」")]),s._v(" ：等待所有任务完成")]),s._v(" "),e("li",[e("strong",[s._v("「anyOf」")]),s._v(" ：只要有一个任务完成")])]),s._v(" "),e("p",[s._v("示例")]),s._v(" "),e("p",[e("strong",[s._v("allOf：等待所有任务完成")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableAallOf() throws ExecutionException, InterruptedException {  \n    //创建线程池  \n    ExecutorService executorService = Executors.newFixedThreadPool(10);  \n    //开启异步任务1  \n    CompletableFuture<Integer> task = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务1，当前线程是：" + Thread.currentThread().getId());  \n        int result = 1 + 1;  \n        System.out.println("异步任务1结束");  \n        return result;  \n    }, executorService);  \n\n    //开启异步任务2  \n    CompletableFuture<Integer> task2 = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务2，当前线程是：" + Thread.currentThread().getId());  \n        int result = 1 + 2;  \n        try {  \n            Thread.sleep(3000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println("异步任务2结束");  \n        return result;  \n    }, executorService);  \n\n    //开启异步任务3  \n    CompletableFuture<Integer> task3 = CompletableFuture.supplyAsync(() -> {  \n        System.out.println("异步任务3，当前线程是：" + Thread.currentThread().getId());  \n        int result = 1 + 3;  \n        try {  \n            Thread.sleep(4000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println("异步任务3结束");  \n        return result;  \n    }, executorService);  \n\n    //任务组合  \n    CompletableFuture<Void> allOf = CompletableFuture.allOf(task, task2, task3);  \n\n    //等待所有任务完成  \n    allOf.get();  \n    //获取任务的返回结果  \n    System.out.println("task结果为：" + task.get());  \n    System.out.println("task2结果为：" + task2.get());  \n    System.out.println("task3结果为：" + task3.get());  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br")])]),e("p",[e("strong",[s._v("anyOf: 只要有一个任务完成")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testCompletableAnyOf() throws ExecutionException, InterruptedException {  \n    //创建线程池  \n    ExecutorService executorService = Executors.newFixedThreadPool(10);  \n    //开启异步任务1  \n    CompletableFuture<Integer> task = CompletableFuture.supplyAsync(() -> {  \n        int result = 1 + 1;  \n        return result;  \n    }, executorService);  \n\n    //开启异步任务2  \n    CompletableFuture<Integer> task2 = CompletableFuture.supplyAsync(() -> {  \n        int result = 1 + 2;  \n        return result;  \n    }, executorService);  \n\n    //开启异步任务3  \n    CompletableFuture<Integer> task3 = CompletableFuture.supplyAsync(() -> {  \n        int result = 1 + 3;  \n        return result;  \n    }, executorService);  \n\n    //任务组合  \n    CompletableFuture<Object> anyOf = CompletableFuture.anyOf(task, task2, task3);  \n    //只要有一个有任务完成  \n    Object o = anyOf.get();  \n    System.out.println("完成的任务的结果：" + o);  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("h2",{attrs:{id:"completablefuture使用有哪些注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture使用有哪些注意点"}},[s._v("#")]),s._v(" CompletableFuture使用有哪些注意点")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://image.xuguoliang.top/2023/10/05/640-20231005141849618-jbR7kt.jpeg",alt:"图片"}})]),s._v(" "),e("p",[e("code",[s._v("CompletableFuture")]),s._v(" 使我们的异步编程更加便利的、代码更加优雅的同时，我们也要关注下它，使用的一些注意点。")]),s._v(" "),e("h4",{attrs:{id:"_1、future需要获取返回值-才能获取异常信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、future需要获取返回值-才能获取异常信息"}},[s._v("#")]),s._v(" 1、Future需要获取返回值，才能获取异常信息")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@Test  \npublic void testWhenCompleteExceptionally() {  \n    CompletableFuture<Double> future = CompletableFuture.supplyAsync(() -> {  \n        if (1 == 1) {  \n            throw new RuntimeException("出错了");  \n        }  \n        return 0.11;  \n    });  \n\n    //如果不加 get()方法这一行，看不到异常信息  \n    //future.get();  \n}  \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("Future需要获取返回值，才能获取到异常信息。如果不加 "),e("code",[s._v("get()")]),s._v("/"),e("code",[s._v("join()")]),s._v("方法，看不到异常信息。")]),s._v(" "),e("p",[s._v("小伙伴们使用的时候，注意一下哈,考虑是否加"),e("code",[s._v("try...catch...")]),s._v("或者使用"),e("code",[s._v("exceptionally")]),s._v("方法。")]),s._v(" "),e("h4",{attrs:{id:"_2、completablefuture的get-方法是阻塞的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、completablefuture的get-方法是阻塞的"}},[s._v("#")]),s._v(" 2、CompletableFuture的get()方法是阻塞的")]),s._v(" "),e("p",[e("code",[s._v("CompletableFuture")]),s._v("的"),e("code",[s._v("get()")]),s._v("方法是阻塞的，如果使用它来获取异步调用的返回值，需要添加超时时间。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//反例  \n CompletableFuture.get();  \n//正例  \nCompletableFuture.get(5, TimeUnit.SECONDS);  \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h4",{attrs:{id:"_3、不建议使用默认线程池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、不建议使用默认线程池"}},[s._v("#")]),s._v(" 3、不建议使用默认线程池")]),s._v(" "),e("p",[e("code",[s._v("CompletableFuture")]),s._v("代码中又使用了默认的 "),e("strong",[s._v("「ForkJoin线程池」")]),s._v(" ，处理的线程个数是电脑 "),e("strong",[s._v("「CPU核数-1」")]),s._v(" 。在大量请求过来的时候，处理逻辑复杂的话，响应会很慢。一般建议使用自定义线程池，优化线程池配置参数。")]),s._v(" "),e("h4",{attrs:{id:"_4、自定义线程池时-注意饱和策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、自定义线程池时-注意饱和策略"}},[s._v("#")]),s._v(" 4、自定义线程池时，注意饱和策略")]),s._v(" "),e("p",[e("code",[s._v("CompletableFuture")]),s._v("的get()方法是阻塞的，我们一般建议使用"),e("code",[s._v("future.get(5, TimeUnit.SECONDS)")]),s._v("。并且一般建议使用自定义线程池。")]),s._v(" "),e("p",[s._v("但是如果线程池拒绝策略是"),e("code",[s._v("DiscardPolicy")]),s._v("或者"),e("code",[s._v("DiscardOldestPolicy")]),s._v("，当线程池饱和时，会直接丢弃任务，不会抛弃异常。因此建议，"),e("code",[s._v("CompletableFuture")]),s._v("线程池策略最好使用"),e("code",[s._v("AbortPolicy")]),s._v("，然后耗时的异步线程，做好线程池隔离哈。")])])}),[],!1,null,null,null);e.default=a.exports}}]);